package com.virality.dishly.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChiefLinksAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiefLinksAllPropertiesEquals(ChiefLinks expected, ChiefLinks actual) {
        assertChiefLinksAutoGeneratedPropertiesEquals(expected, actual);
        assertChiefLinksAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiefLinksAllUpdatablePropertiesEquals(ChiefLinks expected, ChiefLinks actual) {
        assertChiefLinksUpdatableFieldsEquals(expected, actual);
        assertChiefLinksUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiefLinksAutoGeneratedPropertiesEquals(ChiefLinks expected, ChiefLinks actual) {
        assertThat(expected)
            .as("Verify ChiefLinks auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiefLinksUpdatableFieldsEquals(ChiefLinks expected, ChiefLinks actual) {
        assertThat(expected)
            .as("Verify ChiefLinks relevant properties")
            .satisfies(e -> assertThat(e.getTelegramLink()).as("check telegramLink").isEqualTo(actual.getTelegramLink()))
            .satisfies(e -> assertThat(e.getVkLink()).as("check vkLink").isEqualTo(actual.getVkLink()))
            .satisfies(e -> assertThat(e.getOdnoklassnikiLink()).as("check odnoklassnikiLink").isEqualTo(actual.getOdnoklassnikiLink()))
            .satisfies(e -> assertThat(e.getYoutubeLink()).as("check youtubeLink").isEqualTo(actual.getYoutubeLink()))
            .satisfies(e -> assertThat(e.getRutubeLink()).as("check rutubeLink").isEqualTo(actual.getRutubeLink()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiefLinksUpdatableRelationshipsEquals(ChiefLinks expected, ChiefLinks actual) {
        assertThat(expected)
            .as("Verify ChiefLinks relationships")
            .satisfies(e -> assertThat(e.getChief()).as("check chief").isEqualTo(actual.getChief()));
    }
}
