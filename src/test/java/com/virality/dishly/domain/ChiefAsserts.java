package com.virality.dishly.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChiefAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiefAllPropertiesEquals(Chief expected, Chief actual) {
        assertChiefAutoGeneratedPropertiesEquals(expected, actual);
        assertChiefAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiefAllUpdatablePropertiesEquals(Chief expected, Chief actual) {
        assertChiefUpdatableFieldsEquals(expected, actual);
        assertChiefUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiefAutoGeneratedPropertiesEquals(Chief expected, Chief actual) {
        assertThat(expected)
            .as("Verify Chief auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiefUpdatableFieldsEquals(Chief expected, Chief actual) {
        assertThat(expected)
            .as("Verify Chief relevant properties")
            .satisfies(e -> assertThat(e.getRating()).as("check rating").isEqualTo(actual.getRating()))
            .satisfies(e -> assertThat(e.getChiefStatus()).as("check chiefStatus").isEqualTo(actual.getChiefStatus()))
            .satisfies(e -> assertThat(e.getAbout()).as("check about").isEqualTo(actual.getAbout()))
            .satisfies(e -> assertThat(e.getAdditionalLinks()).as("check additionalLinks").isEqualTo(actual.getAdditionalLinks()))
            .satisfies(e -> assertThat(e.getEducationDocument()).as("check educationDocument").isEqualTo(actual.getEducationDocument()))
            .satisfies(e -> assertThat(e.getMedicalBook()).as("check medicalBook").isEqualTo(actual.getMedicalBook()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiefUpdatableRelationshipsEquals(Chief expected, Chief actual) {
        // empty method
    }
}
